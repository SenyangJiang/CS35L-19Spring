1.
Get a copy of the Diffutils repository:
$ git clone ~eggert/src/gnu/diffutils

2.
Go into the diffutils repository:
$ cd diffutils
Get a log of changes and put it into the file git-log.txt:
$ git log > ../git-log.txt

3.
Generate a list of tags used for Diffutils and put it into file 
git-tags.txt:
$ git tag > ../git-tags.txt

4.
Open git-log and find the ID of the commit entitled "maint: quote 
'like this' or "like this", not `like this'"
$ emacs ../git-log.txt
$ C-s maint: quote
The ID of the commit is: 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f

Then generate the patch and put it into the file quote-patch.txt:
$ git show 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f > ../quote-patch.txt

5.
Create and switch to a new branch called v3.0-edit that checks out version 3.0:
$ git checkout v3.0 -b v3.0-edit

6.
Apply quote-patch.txt to version 3.0:
$ patch -p1 < ../quote-patch.txt
Problems in applying the patch:
<1> Missing files to patch:

	HACKING
	doc/diffutils.texi
	man/help2man

When it asks files to patch for these missing files, I hit enter and y
<2> Failed patches:

	README:
	Hunk #1 FAILED at 9.
	Hunk #3 FAILED at 60.
	2 out of 3 hunks FAILED -- saving rejects to file README.rej

	README-hacking:
	Hunk #1 FAILED at 19.
	1 out of 1 hunk FAILED -- saving rejects to file README-hacking.rej

	cfg.mk:
	Hunk #1 FAILED at 29.
	1 out of 1 hunk FAILED -- saving rejects to file cfg.mk.rej

	src/diff.c:
	Hunk #10 FAILED at 876.
	Hunk #11 FAILED at 906.
	Hunk #12 FAILED at 942.
	3 out of 14 hunks FAILED -- saving rejects to file src/diff.c.rej

	src/diff3.c:
	Hunk #6 FAILED at 433.
	1 out of 9 hunks FAILED -- saving rejects to file src/diff3.c.rej


7.
Run the following command as required:
$ git status
Result:
On branch v3.0-edit
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   NEWS
        modified:   README
        modified:   TODO
        modified:   doc/diagmeet.note
        modified:   ms/config.bat
        modified:   ms/config.site
        modified:   po/en.po
        modified:   src/analyze.c
        modified:   src/cmp.c
        modified:   src/context.c
        modified:   src/diff.c
        modified:   src/diff.h
        modified:   src/diff3.c
        modified:   src/dir.c
        modified:   src/ifdef.c
        modified:   src/io.c
        modified:   src/sdiff.c
        modified:   src/side.c
        modified:   src/system.h
        modified:   src/util.c
        modified:   tests/help-version

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        NEWS.orig
        README-hacking.orig
        README-hacking.rej
        README.orig
        README.rej
        cfg.mk.orig
        cfg.mk.rej
        ms/config.site.orig
        src/cmp.c.orig
        src/context.c.orig
        src/diff.c.orig
        src/diff.c.rej
        src/diff.h.orig
        src/diff3.c.orig
        src/diff3.c.rej
        src/dir.c.orig
        src/sdiff.c.orig
        src/system.h.orig
        src/util.c.orig
        tests/help-version.orig

no changes added to commit (use "git add" and/or "git commit -a")

8.
vc-diff(C-x v =): shows the difference between the modified file and 
the original file
vc-revert(C-x v u): Revert the file to the last revision
diff-apply-hunk(C-c C-a): Apply the hunk to the target file, with 
prefix argument of C-u, apply the reverse of the hunk
diff-goto-source(C-c C-c): Go to the source file and line 
corresponding to this hunk. By default, this jumps to the “new” 
version of the file

9.
Using the result of "$ git status" shown in part 7, 
First I revert all the changes to modified files that are not *.c
by applying vc-revert(C-x v u) to each of them

One example(reverting changes in NEWS):
$ emacs NEWS
$ C-x v u yes Enter
$ C-x C-c

Check modified files except *.c has been reverted:
$ git status
The list of modified files has been changed to:

        modified:   src/analyze.c
        modified:   src/cmp.c
        modified:   src/context.c
        modified:   src/diff.c
        modified:   src/diff3.c
        modified:   src/dir.c
        modified:   src/ifdef.c
        modified:   src/io.c
        modified:   src/sdiff.c
        modified:   src/side.c
        modified:   src/util.c

Then open each file listed above with emacs,
Check the changes to the file by vc-diff(C-x v =). Manually check 
every changes made, and undo changes other than to character string 
constants using diff-apply-hunk prefixed with C-u(C-u C-c C-a)

10.
Looking for *.c.rej files in src:
$ find ./src -name *.c.rej
There are two files:
diff.c.rej
diff3.c.rej

Open reject files and corresponding .c files:
$ emacs src/diff.c.rej src/diff.c
Search corresponding lines by C-s
Change corresponding ` to ' 
Switch windows by C-x o

$ emacs src/diff3.c.rej src/diff3.c
Do the same for diff3.c

11.
Remove all untracked files by:
$ git clean -f
Note: When using $ git clean, it outputs an error:
fatal: clean.requireForce defaults to true and neither -i, -n, nor -f given; refusing to clean

So -f option must be used

12.
Running "git status" again:
$ git status
On branch v3.0-edit
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   src/cmp.c
        modified:   src/diff.c
        modified:   src/diff3.c
        modified:   src/dir.c
        modified:   src/sdiff.c
        modified:   src/util.c

no changes added to commit (use "git add" and/or "git commit -a")

It reported exactly 6 modified files


Put the patch generated by "git diff" into a file 
"quote-3.0-patch.txt":
$ git diff > ../quote-3.0-patch.txt

Check number of lines in quote-3.0-patch.txt:
$ cat quote-3.0-patch.txt | wc -l
result: 326

13.
Following the command specified in README-hacking:
$ ./bootstrap

Because I am using lnxsrv09, I need to apply an additional patch:
$ wget http://web.cs.ucla.edu/classes/spring19/cs35L/assign/diffutils-gets.diff
$ patch -p0 < diffutils-gets.diff

Then I continue the build process:
$ ./configure
$ make
$ make check

Then verify that Diffutils does the right thing by:
$ diff . -
$ diff --help

I see that all quoting character is '

14.
Create two directories diffutils-3.0, diffutils-3.0-patch :
$ cd ..
$ mkdir diffutils-3.0 diffutils-3.0-patch
These two directories will contain the original source code and the 
new source code

Get another copy of the Diffutils repository:
$ git clone ~eggert/src/gnu/diffutils diffutils_original

Switch to the branch v3.0:
$ git checkout v3.0 -b v3.0-edit

Copy the original source code into diffutils-3.0:
$ cp -r src/*.c ../diffutils-3.0

Then copy the modified source code into diffutils-3.0-patch:
$ cd ../diffutils
$ cp -r src/*.c ../diffutils-3.0-patch

Compare the source code of Diffutils 3.0 to the source code of the
modified version:
$ cd ..
$ diffutils/src/diff -pru diffutils-3.0 diffutils-3.0-patch >quote-3.0-test.txt

15.
Use diff to compare the contents of quote-3.0-test.txt and 
quote-3.0-patch.txt:
$ diff -u quote-3.0-test.txt quote-3.0-patch.txt > comp.diff

There are a lot of differences between these two files
But the differences are all about different paths in the header of 
each hunk, or the order of the content may be different.
As a result, the differences are innocuous.