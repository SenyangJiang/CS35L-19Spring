First I check whether /usr/local/cs/bin is added to the PATH environment variable:
$ echo $PATH
/usr/local/cs/bin is printed as the first entry

Then I check the version of coreutils:
$ sort --version
sort (GNU coreutils) 8.31
This version is newer than 8.6

=========================================================================
Generate a file with 2^24 random floating point numbers

I first explore the 'od' man page to find the necessary option:
$ man od
-N specifies the number of bytes we want to dump in the input file
in this case, because we want to generate 2^24 single precision floating point numbers,
each of which is 4 bytes, we need to dump a total of 4*2^24 = 2^26 bytes
-An is used to prevent the program from printing file offsets
-t fF specifies the output format is floating point numbers


Then generate a file with 2^24 random single-precision floating point numbers with the following command:
$ od -An -t fF -N $((2**26)) < /dev/urandom | 
$ tr -s [:blank:] '\n' |
$ sed '/^$/d' > output.txt

tr -s [:blank:] '\n' is used to replace the spaces between each floating point number with newline, 
and the -s option removes extra empty line between the numbers
sed '/^$/d' removes an empty line at the start of the file

Then I check the correctness of my command by:
$ cat output.txt | wc -l
wc -l counts the number of lines in output.txt, which is equal to the number of floating point number generated
result: 16777216

=========================================================================
time the sort command without and with --parallel option

Use time -p to time the command 'sort -g' on the file containing 2^24 floating point numbers
$ time -p sort -g output.txt > /dev/null
Result:
	real 37.70
	user 201.78
	sys 0.79

Then I check how to use the --parallel option
$ sort --help
I found that I should specify --parallel=N, where N is the number of threads

Then I run sort with 1, 2, 4, 8 threads with the time command:
<1 thread> 
$ time -p sort -g --parallel=1 output.txt > /dev/null
Result:
	real 192.61
	user 192.27
	sys 0.33

<2 threads> 
$ time -p sort -g --parallel=2 output.txt > /dev/null
Result:
	real 102.63
	user 195.01
	sys 0.49

<4 threads> 
$ time -p sort -g --parallel=4 output.txt > /dev/null
Result:
	real 59.33
	user 198.47
	sys 0.65

<8 threads>
$ time -p sort -g --parallel=8 output.txt > /dev/null
Result:
	real 38.41
	user 200.46
	sys 0.78

We can see that as the number of threads increases, the time taken by the sort programs decreases. 
Furthermore, the time taken by the sort command without specifying the --parallel option is similar to time taken by the sort using 8 threads
This indicates that sort uses 8 threads by default