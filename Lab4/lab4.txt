==================================================================
Build this old version of ls


First I download the tarball of the bugged version of coreutils:
$ wget http://web.cs.ucla.edu/classes/spring19/cs35L/assign/coreutils-with-bug.tar.gz

Unzip the tarball:
$ tar -xzvf coreutils-with-bug.tar.gz

create a directory for installing coreutils:
$ mkdir ~/coreutilsInstall

Go into the directory containing unzipped coreutils files:
$ cd coreutils-with-bug

Then I tried to build the bugged version of coreutils:
$ ./configure CFLAGS='-g -O0' --prefix=/u/eng/class/classsen/coreutilsInstall
CFLAGS='-g -O0' disables compiler optimizations

$make
Then I enconter this error:

In file included from utimecmp.c:41:
utimens.h:2:5: error: conflicting types for 'futimens'
 int futimens (int, char const *, struct timespec const [2]);
     ^~~~~~~~
In file included from utimecmp.h:25,
                 from utimecmp.c:25:
/usr/include/sys/stat.h:373:12: note: previous declaration of 'futimens' was here
 extern int futimens (int __fd, const struct timespec __times[2]) __THROW;
            ^~~~~~~~

This is because the function "futimens" is defined with different parameter and return type in utimens.h and /usr/include/sys/stat.h
Since they are both included in utimecmp.c, these two declaration of "futimens" would conflict and produce an error


I download the patch into current directory:
$ wget http://web.cs.ucla.edu/classes/spring19/cs35L/assign/coreutils.diff

Then apply the patch to corresponding files:
$ patch -p0 <coreutils.diff

It creates the following message:
patching file lib/utimens.c
patching file lib/utimens.h
patching file src/copy.c
patching file src/tee.c
patching file src/touch.c

The patch is successful

Then install coreutils with the patch to the directory "coreutilsInstall":
$ make
$ make install

This time it builds successfully

The patch fixes the problem because it renames the function "futimens" in utimens.h (as well as calls to this function in other files) to coreutils_futimens, so that the function name conflict in utimens.h and /usr/include/sys/stat.h is resolved.

==================================================================
Reproduce the problem


$ cd ~
Then I run the commands shown on the spec:
$ tmp=$(mktemp -d)
$ cd $tmp
$ touch -d '1918-11-11 11:00 GMT' wwi-armistice-cs35L
$ touch now
$ sleep 1
$ touch now1
$ TZ=UTC0 ~/coreutilsInstall/bin/ls -lt --full-time wwi-armistice-cs35L now now1
The last command outputs the following:
-rw-r--r-- 1 classsen class 0 1918-11-11 11:00:00.000000000 +0000 wwi-armistice-cs35L
-rw-r--r-- 1 classsen class 0 2019-04-28 23:07:39.112625048 +0000 now1
-rw-r--r-- 1 classsen class 0 2019-04-28 23:07:38.010585761 +0000 now

The file wwi-armistice-cs35L is incorrectly considered as the newest file

Then I make sure the problem does not occur using the correct ls:
$ TZ=UTC0 ls -lt --full-time wwi-armistice-cs35L now now1
-rw-r--r-- 1 classsen class 0 2019-04-28 23:07:39.112625048 +0000 now1
-rw-r--r-- 1 classsen class 0 2019-04-28 23:07:38.010585761 +0000 now
-rw-r--r-- 1 classsen class 0 1918-11-11 11:00:00.000000000 +0000 wwi-armistice-cs35L

The output is right using the correct version of ls

At last, remove the temp directory:
$ cd
$ rm -fr $tmp

========================================================================
Debugged ls & Fix corresponding file


First we go into the directory containing source file and executable ls
$ cd ~/coreutils-with-bug/src

First I check the ls.c source file to look for any functions related to the problem
$ cd ~/coreutils-with-bug/src
$ emacs ls.c

Specifically, I look for where the option 't' (sort by time) options appears in the code and then search for functions related with that

I found that function sort_files is a function that will sort the files according to order specified

Then make the three files:
$ tmp=$(mktemp -d)
$ cd $tmp
$ touch -d '1918-11-11 11:00 GMT' wwi-armistice-cs35L
$ touch now
$ sleep 1
$ touch now1

Then open gdb and load ls:
$ gdb ~/coreutils-with-bug/src/ls

Then I set a breakpoint at function sort_files

Run ls with the three filenames:
(gdb) run -lt wwi-armistice-cs35L now now1
Starting program: /w/home.03/class/classsen/coreutils-with-bug/src/ls -lt wwi-armistice-cs35L now now1

Breakpoint 1, sort_files () at ls.c:2962
2962      if (! setjmp (failed_strcoll))
After several steps further, I found that the compare function used is compare_mtime:
(gdb) info locals
func = 0x405fc2 <compare_mtime>

so I set another breakpoint at compare_mtime
(gdb) b compare_mtime
Breakpoint 2 at 0x405fd2: file ls.c, line 2884.

Then I run the program for several steps until reaching this line:
(gdb) s
timespec_cmp (a=..., b=...) at ../lib/timespec.h:48
48        int diff = a.tv_sec - b.tv_sec;

this timespec_cmp could be the source of the problem, since diff may overflow

Then I look into this function:
(gdb) l
43      /* Return negative, zero, positive if A < B, A == B, A > B, respectively.
44         Assume the nanosecond components are in range, or close to it.  */
45      static inline int
46      timespec_cmp (struct timespec a, struct timespec b)
47      {
48        int diff = a.tv_sec - b.tv_sec;
49        return diff ? diff : a.tv_nsec - b.tv_nsec;
50      }
51
52      # if ! HAVE_DECL_NANOSLEEP

I looked at the arguments:
(gdb) info args
a = {tv_sec = 1556499701, tv_nsec = 423894023}
b = {tv_sec = 1556499700, tv_nsec = 330855098}
This one should be fine since a.tv_sec and b.tv_sec are close, diff does not overflow

I continued running the program, checking the arguments when entering this function again
(gdb) info args
a = {tv_sec = 1556499701, tv_nsec = 423894023}
b = {tv_sec = -1613826000, tv_nsec = 0}
(gdb) s
49        return diff ? diff : a.tv_nsec - b.tv_nsec;
(gdb) info locals
diff = -1124641595

a.tv_sec - b.tv_sec should be postive, but it overflows and it becomes negative, the problem has been found

Then I go to the directory containing timespec.h:
$ cd ~/coreutils-with-bug/lib
First I create a copy of timespec.h:
$ cp timespec.h timespec_corrected.h
Then I opened timespec_corrected.h and change timespec_cmp to the following

static inline int
timespec_cmp (struct timespec a, struct timespec b)
{
  if(a.tv_sec < b.tv_sec){
    return -1;
  }
  else if(a.tv_sec > b.tv_sec){
    return 1;
  }
  else{
    return a.tv_nsec > b.tv_nsec ? 1 : (a.tv_nsec < b.tv_nsec ? -1 : 0);
    }
}

Then I create the patch file:
$ diff -u timespec.h timespec_corrected.h > lab4.diff

Then create a ChangeLog
$ emacs ls.c
$ C-x 4 a

Copy the ChangeLog to the patch lab4.diff

I test the patch by applying the patch to timespec.h:
$ patch -p0<lab4.diff
patching file timespec.h

Then I make a new directory and install the fixed version of coreutils into that directory:
$ mkdir ~/coreutilsFixed
$ cd ..
$ ./configure --prefix=/u/eng/class/classsen/coreutilsFixed
$ make
$ make install

After successful installation, I run these lines again:
$ cd ~
Then I run the commands shown on the spec:
$ tmp=$(mktemp -d)
$ cd $tmp
$ touch -d '1918-11-11 11:00 GMT' wwi-armistice-cs35L
$ touch now
$ sleep 1
$ touch now1
$ TZ=UTC0 ~/coreutilsInstall/bin/ls -lt --full-time wwi-armistice-cs35L now now1

The last command outputs the following:
-rw-r--r-- 1 classsen class 0 2019-04-29 23:31:09.044822134 +0000 now1
-rw-r--r-- 1 classsen class 0 2019-04-29 23:31:07.953783361 +0000 now
-rw-r--r-- 1 classsen class 0 1918-11-11 11:00:00.000000000 +0000 wwi-armistice-cs35L

I see that the very old file has been correctly placed, the problem is fixed.

Then I removed the temp directory

========================================================================
Reproduce the problem on SEASnet Linux servers


$ touch -d '1918-11-11 11:00 GMT' wwi-armistice-cs35L
$ touch now
$ sleep 1
$ touch now1
$ TZ=UTC0 ls -lt --full-time wwi-armistice-cs35L now now1

I get the following output:
-rw-r--r-- 1 classsen class 0 2054-12-17 17:28:16.000000000 +0000 wwi-armistice-cs35L
-rw-r--r-- 1 classsen class 0 2019-04-29 17:18:33.010981000 +0000 now1
-rw-r--r-- 1 classsen class 0 2019-04-29 17:18:31.853773000 +0000 now

As we can see, SEASnet does not handle files with very old timestamp correctly. 
But there is some difference from the previous case. 
When using SEASnet touch command to create a very old file, it sets its timestamp to be in the far future, 
and then ls -t list the file according to this incorrect timestamp.